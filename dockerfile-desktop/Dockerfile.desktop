#####
# Used to generate the 'wardf/desktop' docker container.
# This is accessed either via a VNC client or a web browser,
# thanks to 'noVNC'.
#####

#####
# Common stuff at front.
#####

FROM unidata/cloudstream
MAINTAINER Ward Fisher <ward.fisher@gmail.com>
USER root
ENV DEBIAN_FRONTEND noninteractive

#####
# Install packages and update the system.
#####

###
# Install developer tools, utilities, vnc/novnc, ssh, other stuff.
###
RUN apt-get update
RUN apt-get install -y man nano curl git emacs wget gcc g++ gfortran clang gdb autoconf automake make libtool m4 bison flex zlib1g-dev libjpeg-dev libcurl4-openssl-dev x11vnc xvfb xinit lxde wmctrl python firefox openssh-server doxygen graphviz zip valgrind kcachegrind gitstats elfutils libelf-dev htop meld

###
# Install cmake, HDF4, HDF5
###

###
# CMake
###
ENV CMAKE_VER cmake-3.3.2
ENV CMAKE_FILE ${CMAKE_VER}.tar.gz
RUN wget http://www.cmake.org/files/v3.3/${CMAKE_FILE}
RUN tar -zxf ${CMAKE_FILE}

RUN cd ${CMAKE_VER} && ./configure --prefix=/usr && make install -j 4 && ldconfig
RUN rm -rf ${CMAKE_VER}

##
# HDF4
##
ENV HDF4_VER hdf-4.2.11
ENV HDF4_FILE ${HDF4_VER}.tar.bz2
RUN wget http://www.hdfgroup.org/ftp/HDF/HDF_Current/src/${HDF4_FILE}
RUN tar -jxf ${HDF4_FILE}

RUN cd ${HDF4_VER} && ./configure --disable-static --enable-shared --disable-netcdf --disable-fortran --prefix=/usr && make install -j 4
RUN rm -rf ${HDF4_VER}

##
# HDF5
##
ENV HDF5VER 1.8.16
ENV HDF5_VER hdf5-${HDF5VER}
ENV HDF5_FILE ${HDF5_VER}.tar.bz2

RUN wget http://www.hdfgroup.org/ftp/HDF5/releases/${HDF5_VER}/src/${HDF5_FILE}
RUN tar -jxf ${HDF5_FILE}

RUN cd ${HDF5_VER} && ./configure --disable-static --enable-shared --disable-fortran --enable-hl --prefix=/usr && make install -j 4
RUN rm -rf ${HDF5_VER}

#####
# Switch over to non-root user,
# configure system and environment.
#####
USER ${CUSER}
ENV HOME /home/${CUSER}
WORKDIR /home/${CUSER}

#################
# This is an example of overriding the
# default window manager used by
# unidata/cloudidv
#################

###
# Create the .xinitrc file.
# This will be invoked when xinit is called from the initial
# command script.
###

RUN mkdir -p ~/.vnc
RUN echo '  /usr/bin/x11vnc -display :1 -autoport 5901 -repeat -forever &' > ~/.xinitrc.nopassword
RUN echo '/usr/bin/startlxde' >> ~/.xinitrc.nopassword

RUN echo '  /usr/bin/x11vnc -display :1 -autoport 5901 -repeat -forever -usepw &' > ~/.xinitrc.password
RUN echo '/usr/bin/startlxde' >> ~/.xinitrc.password


#####
# Initialize environmental variables, expose
# ports, etc.
#####
EXPOSE 22
EXPOSE 5901
EXPOSE 6080

###
# If not true, noVNC will not run.
###
ENV USENOVNC TRUE

#############
# Override default windows session geometry and color depth.
#############
ENV SIZEW 1600
ENV SIZEH 1000
ENV CDEPTH 24

#####
# Do some user configuration.
#
# * Configure git
# * Configure emacs
# * configure .bashrc with aliases
#####
RUN git config --global user.email "wfisher@ucar.edu"
RUN git config --global user.name "Ward Fisher"
RUN git config --global push.default simple
RUN git config --global credential.helper 'cache --timeout=3600'

RUN echo "alias desk='cd $HOME/Desktop'" >> $HOME/.bashrc

#####
# Copy over scripts, configuration files, readme, etc.
#####

###
# Make some directories.
###
RUN mkdir -p /home/${CUSER}/local/bin
RUN mkdir -p /home/${CUSER}/docs

###
# Copy over files.
###
COPY README.md /home/${CUSER}/docs/
COPY Dockerfile.desktop /home/${CUSER}/docs/

COPY config/emacs-small.el /home/${CUSER}/
RUN mv /home/${CUSER}/emacs-small.el /home/${CUSER}/.emacs
COPY config/dotconfig/ /home/${CUSER}/.config/

COPY config/xscreensaver /home/${CUSER}/
RUN mv /home/${CUSER}/xscreensaver /home/${CUSER}/.xscreensaver

##
# SSH stuff
##
USER root
COPY ssh /home/${CUSER}/.ssh/
RUN chown -R ${CUSER} /home/${CUSER}/.ssh
RUN chmod 600 /home/${CUSER}/.ssh/*
RUN mv /home/${CUSER}/.ssh/id_rsa.pub /home/${CUSER}/.ssh/authorized_keys

#
# Create a utility ssh script we can use.
# assume that the key is in the correct (same) directory.
#
RUN echo '#!/bin/bash' > dockssh.sh
RUN echo 'echo "What IP is the ssh server running on? [192.168.99.100]"' >> dockssh.sh
RUN echo 'read SSHIP' >> dockssh.sh
RUN echo 'echo "What Port is the ssh server running on [22]?"' >> dockssh.sh
RUN echo 'read SSHPORT' >> dockssh.sh
RUN echo 'if [ "x$SSHIP" == "x" ]; then' >> dockssh.sh
RUN echo '    SSHIP="192.168.99.100"' >> dockssh.sh
RUN echo 'fi' >> dockssh.sh
RUN echo 'if [ "x$SSHPORT" == "x" ]; then' >> dockssh.sh
RUN echo '    SSHPORT="22"' >> dockssh.sh
RUN echo 'fi' >> dockssh.sh
RUN echo 'ssh -i ssh/id_rsa.docker.desktop -p ${SSHPORT} ubuntu@${SSHIP}' >> dockssh.sh
RUN chmod 755 dockssh.sh

RUN git clone http://github.com/lvc/installer lvc-installer && cd lvc-installer && make install prefix=/usr target=abi-tracker

###
# Add a version number.
###
ENV DESKTOP_VERSION 1.0.0 - development
RUN echo "Desktop Version: \"$DESKTOP_VERSION\"\t\t$(date)" >> $VERSION_FILE

###
# Cleanup
###

RUN rm -f /usr/bin/ncdump /usr/bin/ncgen
RUN chown -R ${CUSER} /home/${CUSER}/
RUN apt-get -y clean
RUN apt-get -y autoclean
RUN apt-get -y purge

#####
# Kick off the session as the following user.
#
# Because there's no default program, we
# don't have to copy over a start.sh file.
#####
USER ${CUSER}
